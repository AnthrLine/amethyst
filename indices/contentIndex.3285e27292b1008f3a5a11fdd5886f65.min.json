{"/":{"title":"Benvingut!","content":"En aquesta pàgina trobarà apunts i explicacions sobre temes que m'interessen.\nRecordeu que la informació donada en aquesta pàgina no està supervisada per cap professional i es dona sense cap garantia, ja que és un projecte de hobby.\n\nPots començar indagant sobre:\n- [[elecdig/_index|Electrònica digital]]: Una sèrie sobre com funcionen i quina estructura tenen els ordinadors.\n- ","lastmodified":"2025-02-19T08:39:09.311769807Z","tags":null},"/Fulla-de-refer%C3%A8ncies":{"title":"Fulla de referències","content":"\nEn aquest document veuràs totes les referències que s'han fet servir en la pàgina. Aquests enllaços poden servir per indagar més en el tema a tractar, ja que no figura tota la informació en aquesta pàgina.\n\n### Senyal analògic\n- https://ca.wikipedia.org/wiki/Senyal_anal%C3%B2gic\n### Sistema digital\n- https://ca.wikipedia.org/wiki/Sistema_digital\n### Àlgebra de boole\n- https://en.wikipedia.org/wiki/Boolean_algebra\n### Teorema de De Morgan\n- https://ca.wikipedia.org/wiki/Lleis_de_De_Morgan\n### Forma canònica\n- https://ca.wikipedia.org/wiki/Forma_can%C3%B2nica_(%C3%A0lgebra_de_Boole)\n### Circuits aritmètics\n- https://www.geeksforgeeks.org/arithmetic-circuits/\n### Half adder\n- https://www.build-electronic-circuits.com/half-adder/","lastmodified":"2025-02-19T08:39:09.311769807Z","tags":null},"/elecdig/":{"title":"Electrònica digital","content":"Aquesta és la secció dedicada a l'estructura interna dels ordinadors i la seva electrònica.\nEstà composada de dos blocs:\n- El [[elecdig/b1/_index|primer bloc]] tracta els computadors al nivell més baix, començant per les portes lògiques.\n- El segon bloc està per començar.","lastmodified":"2025-02-19T08:39:09.311769807Z","tags":null},"/elecdig/b1/":{"title":"Electrònica digital - Bloc 1","content":"Aquest bloc es divideix en 4 temes:\n- [[Estructura i algebra de boole|Estructura i àlgebra de boole]]\n- [[Sistemes combinacionals]]\n- [[Sistemes seqüencials]]\n- Arquitectura senzilla d'un sistema","lastmodified":"2025-02-19T08:39:09.311769807Z","tags":null},"/elecdig/b1/Estructura-i-algebra-de-boole":{"title":"T.1 - Estructura i àlgebra de boole","content":"# Introducció\n## Definicions\n### Dades analògiques\nLes **dades analògiques** són el tipus de dades que varien de forma contínua en el temps, com qualsevol dels senyals de la naturalesa. [[Fulla de referències#Senyal analògic|1]]\nQuan es mesuren (mostregen) les dades analògiques, s'ha de tenir en compte la freqüència en la que es mesuren (freqüència de mostreig), ja que aquesta pot determinar la precisió de les dades, inclús falsejar-les completament, com es veu en aquest exemple:\n\n![Untitled](/elecdig/b1/t1/freq_mostreig.png)\n\nEs pot veure clarament que el segon mostreig, serà molt proper a la funció, mentre el primer, ens donarà unes dades completament incorrectes sobre el que s'intenta analitzar.\n### Sistemes digitals\nEls sistemes digitals són dispositius creats per a:\n- generar\n- transmetre\n- processar\n- emmagatzemar\n\nsenyals digitals. Per tant, les dades analògiques que es volen tractar s'han hagut de digitalitzar prèviament. [[Fulla de referències#Sistema digital|2]]\n\n### Senyal de rellotge\nÉs un tipus de senyal que alterna entre entre HIGH i LOW de forma homogènia. Ho fa amb un **període** (T), que es defineix com el temps que es tarda entre dues repeticions d'aquest interval. La **freqüència**, mesura el nombre de repeticions per segon, i utilitza el *Hertz*.\n$$ f = \\frac{1}{T} = T^{-1} \\hspace{2cm} T = \\frac{1}{f} = f^{-1} $$\n\nAquests senyals a part dels nivells alt (quan està en HIGH) i baix (quan està en LOW), també tenen els anomenats **flancs**:\nCom que canviar del nivell no és un procés perfecte, es pot detectar aquest canvi, per tant, també es pot fer servir per a activar diferents circuits.\nQuan el senyal canvia de nivell baix a alt s'anomena *flanc de pujada*, quan ho fa a l'inrevés s'anomena *flanc de baixada*.\n## Arquitectura bàsica d'un computador\nL'arquitectura bàsica d'un computador és l'arquitectura de Von Neumann, que defineix que un computador ha de tenir un **processador**, **memòria** i una unitat dedicada a **l'entrada i sortida**. A més, aquestes unitats han d'estar connectades entre sí a través d'un **sistema de busos**.\n\nDins del processador, s'ha de trobar una **unitat de control** i una **unitat aritmètico-lògica** (ALU).\n\n# Àlgebra de Boole\nL'àlgebra de Boole és una branca de l'àlgebra que es diferència de l'àlgebra tradicional a través de dos aspectes diferenciadors importants: [[Fulla de referències#Àlgebra de boole|3]]\n- Els valors de les variables i funcions només es poden denotar amb *true* o *false*, 1 o 0, Vcc o GND (Són diferentes maneres d'indicar el mateix).\n- L'àlgebra de Boole es basa en els seus dos operadors principals, el *or* i l'*and*\n\n\n## Postulats\nDins de la definició de l'àlgebra de Boole s'inclouen diferents postulats:\n\n| **Postulats**         | OR                   | AND                         |\n| --------------------- | -------------------- | --------------------------- |\n| Commutativitat        | $a+b = b+a$          | $a \\cdot b = b \\cdot a$     |\n| Element neutre        | $a+0 = a$            | $a \\cdot 1 = a$             |\n| Distributiva          | $a(b+c) = ab + ac$   | $a+(b\\cdot c) = (a+b)(a+c)$ |\n| Element complementari | $a+\\overline{a} = 1$ | $a\\cdot\\overline{a} = 0$    |\n## Teoremes\nHi ha 13 teoremes a l'àlgebra de Boole, tot i que el més important és el **Teorema de De Morgan**: [[Fulla de referències#Teorema de De Morgan|4]] que especifica aquesta propietat en les funcions booleanes:\n\n$$\\overline{A \\cdot B} \\leftrightarrow \\overline{A} + \\overline{B}$$\n$$\\overline{A + B} \\leftrightarrow \\overline{A} \\cdot \\overline{B}$$\n## Portes lògiques\nHi ha 7 portes lògiques diferents, les quals són:\n- **NOT**: $f(x) = \\overline{x}$\n- **AND** $f(x, y) = x \\cdot y$\n- **OR** $f(x, y) = x + y$\n- **XOR** $f(x, y) = x \\oplus y$\n- **NAND** $f(x, y) = \\overline{x \\cdot y}$\n- **NOR** $f(x, y) = \\overline{x + y}$\n- **XNOR** $f(x, y) = \\overline{x \\oplus y}$\nEls símbols de les portes són els següents:\n![[elecdig/b1/t1/portes.png]]\n## Mínterms i Màxterms\nLa **Forma canònica** és una manera de representar les funcions Booleanes de forma estandarditzada, que facilita veure els **mínterms** i els **màxterms** de forma senzilla.[[Fulla de referències#Forma canònica|5]]\nLa funcions es poden expressar en forma canònica a través de:\n- **Suma de productes**, $f(a,b) = A  \\overline{B} + \\overline{A}  B$\n- **Producte de sumes** $f(a,b) = (A + B) \\cdot (\\overline{A + B})$\n\n\n### Mínterms\nEls **Mínterms** són els productes que fan que la funció sigui verdadera on cada variable apareix un cop, aquests, s'expressen com a suma de productes. Si perquè la funció sigui verdadera una o més de les variables han de ser 0, aquestes s'escriuràn negades a la suma de productes.\nPer a veure millor els mínterms, aquest és un exemple:\n\n| $n$   | **A** | **B** | **C** | **$f$** | **Mínterm**          |\n| ----- | ----- | ----- | ----- | ------: | -------------------- |\n| 0     | 0     | 0     | 0     |       0 |                      |\n| 1     | 0     | 0     | 1     |       0 |                      |\n| 2     | 0     | 1     | 0     |       0 |                      |\n| **3** | **0** | **1** | **1** |   **1** | **$\\overline{A}BC$** |\n| **4** | **1** | **0** | **0** |   **1** | **$A\\overline{BC}$** |\n| 5     | 1     | 0     | 1     |       0 |                      |\n| **6** | **1** | **1** | **0** |   **1** | **$AB\\overline{C}$** |\n| 7     | 1     | 1     | 1     |       0 |                      |\n\nEn l'exemple, es veu com la funció només té mínterms quan dóna 1 i ens podem referir a ells depenent de l'ordre en el que apareixen a la taula, en aquest cas serien els mínterms 3, 4 i 6.\n\nLa funció es pot expressar com a la suma dels seus mínterms, per tant, $\\overline{A}BC + A\\overline{BC} + AB\\overline{C}$. A més, si se sap la funció, els mínterms es poden expressar de la següent manera:\n$$F(A, B, C) = \\sum_{m}{(3, 4, 6)}$$\n\u003e [!important]\n\u003e Apunt important!\n\u003e \n\u003e Recorda que al fer la **taula de veritat**, s'ha de fer de manera **ordenada**, ja que sinó, els nombres dels mínterms quedaràn mal ordenats.\n\u003e \n\u003e També, al fer la suma de mínterms, s'ha d'**especificar el seu ordre**.\n\n### Màxterms\nTambé existeixen els màxterms, el concepte és el mateix que els dels mínterms, tot i que s'expressen com a producte de sumes i fan que la funció sigui falsa, amb el mateix exemple d'abans seria:\n\n| $n$ | **A** | **B** | **C** | **$f$** | **Mínterm**      | **Màxterm**                   |\n| --- | ----- | ----- | ----- | ------: | ---------------- | ----------------------------- |\n| 0   | 0     | 0     | 0     |       0 |                  | $A+B+C$                       |\n| 1   | 0     | 0     | 1     |       0 |                  | $A+B+\\overline{C}$            |\n| 2   | 0     | 1     | 0     |       0 |                  | $A+\\overline{B}+C$            |\n| 3   | 0     | 1     | 1     |       1 | $\\overline{A}BC$ |                               |\n| 4   | 1     | 0     | 0     |       1 | $A\\overline{BC}$ |                               |\n| 5   | 1     | 0     | 1     |       0 |                  | $\\overline{A}+B+\\overline{C}$ |\n| 6   | 1     | 1     | 0     |       1 | $AB\\overline{C}$ |                               |\n| 7   | 1     | 1     | 1     |       0 |                  | $\\overline{A+B+C}$            |\n\nPer tant, els màxterms són 0, 1, 2, 5 i 7. La funció s'expressaria com a $(A+B+C)(A+B+\\overline{C})(A+\\overline{B}+C)(\\overline{A}+B+\\overline{C})(\\overline{A+B+C})$ o com a :\n\t$$F(A,B,C) = \\prod_{M}{(0, 1, 2, 5, 7)}$$\n## Suficiència de la NAND i de la NOR\nTots els circuits es poden expressar com a portes NAND o com a portes NOR, implementar totes les portes amb el mateix tipus de porta ens permet fer servir només un tipus d'integrat, cosa que ens facilita abaratir costos, les equivalències són les següents:\n![[elecdig/b1/t1/suficiencia.png]]\n","lastmodified":"2025-02-19T08:39:09.311769807Z","tags":null},"/elecdig/b1/Sistemes-combinacionals":{"title":"T.2 - Sistemes combinacionals","content":"\u003e [!warning] Atenció\n\u003e \n\u003e Aquesta pàgina NO està acabada!\n\n\n\u003e[!info] TL;DR\n\u003e\n\u003eLa sortida d'un **circuit combinacional** només es veu condicionada per l'entrada que té, hi ha diferents tipus, però normalment serveixen per a fer càlculs de l'àlgebra de boole.\n\n## Anàlisi i disseny dels circuits combinacionals\nPer a treballar amb circuits combinacionals s'ha de saber com analitzar el que fan, si és que no sabem quin tipus de circuits són, o hem d'aprendre a dissenyar els nostres propis circuits, per poder resoldre els problemes específics que poguem tenir.\n\nL'**anàlisi** d'un circuit combinacional es fa de la següent manera:\n### Anàlisi\nUna manera senzilla de saber quina funció desenvolupa un circuit és fent la taula de veritat del mateix, per això s'ha de:\n-  Trobar les entrades i sortides\n- Definir les sortides com a funcions\n- Definir les entrades com a variables\n- Construïr la taula de veritat\n- Obtenir la funció\n\t- Simplificació gràfica per Karnaugh\n\t- [[Estructura i algebra de boole#Mínterms i Màxterms|Simplificació per mínterms o màxterms]]\n- Esbrinar la funció real del circuit.\n\n### Disseny\nPer altra banda, si es vol fer el disseny, s'ha de fer el procés invers que en l'anàlisi, per tant, seria:\n- Determinar la funció del circuit, amb entrades i sortides\n- Construir la taula de veritat\n- Obtenir la funció\n\t- Simplificació gràfica per Karnaugh\n\t- [[Estructura i algebra de boole#Mínterms i Màxterms|Simplificació per mínterms o màxterms]]\n- Construir el circuit\n## Circuits aritmètics\nEls diferents circuits aritmètics són els blocs fundacionals de les diferentes operacions aritmètiques que fan els ordinadors, aquests són els següents: [[Fulla de referències#Circuits aritmètics|1]]\n### Half adder\nEl Half adder és el circuit més bàsic que hi ha per afegir números binaris. Concretament, suma dos números de 1 bit cadascú. [[Fulla de referències#Circuits aritmètics|1]], [[Fulla de referències#Half adder|2]]\nD'aquesta manera té dues entrades, una per a cada número, i té dues sortides, la suma o $S$ i el *Carry out* o $C_{o}$  tot i que en els half adders es pot dir senzillament *Carry*.\n\nLa suma i el $C_{o}$ són sortides de 1 bit cadascuna, siguent el $C_{o}$ la sortida de més pes.\n\nLa taula de veritat del half adder queda de la següent manera:\n\n| **A** | **B** | **S** | **$C_{o}$** |\n| ----- | ----- | ----- | ----------- |\n| 0     | 0     | 0     | 0           |\n| 0     | 1     | 1     | 0           |\n| 1     | 0     | 1     | 0           |\n| 1     | 1     | 0     | 1           |\n### Full adder\nEl Full adder té el mateix concepte que el half adder","lastmodified":"2025-02-19T08:39:09.311769807Z","tags":null},"/elecdig/b1/Sistemes-seq%C3%BCencials":{"title":"T.3 - Sistemes seqüencials","content":"\n\u003e [!warning] Atenció\n\u003e \n\u003e Aquesta pàgina NO està acabada!\n\nEls circuits seqüencials són circuits amb la capacitat de seguir un procés amb un ordre, per tant, estàn afectats per el moment en el que entren les senyals d'entrada, no només elles afecten el resultat.\nAquests sistemes per a tenir un control del temps fan servir un circuit anomenat **flip-flop**, aquest, és capaç d'emmagatzemar un bit.\n\n# Mantenir el control\n## Flip-Flops\nPer treballar amb els flip-flops designarem una nomenclatura comú:\n- $Q$ o $Q⁺$ S'utilitzarà per a definir l'estat actual\n- $Q⁻$ S'utilitzarà per a definir l'estat anterior\n- Una *Taula de transicions* serà la taula que marcarà com han de ser les entrades per a guardar un bit en concret depenent del que hi hagés guardat en el moment.\n- La *Taula de veritat* serà igual que amb els altres circuits, relacionarà totes les entrades amb les sortides.\n\nHi ha diferents tipus de flip-flops, tot i que tots parteixen del mateix, el de **tipus RS**:\n### Tipus RS\nAquests, tenen 2 entrades, l'entrada $S$ o *set*, que servirà per a guardar un 1 a la memòria i l'entrada $R$ o *reset*, que servirà per deixar la memòria a 0.\nAmb portes lògiques, aquests flip-flops es construeixen així:\n![Construcció flip-flop SR](/elecdig/b1/t2/sr.png)\n\nPer tant, si $S=1, R=0$ la sortida $Q$ sempre serà 1, per altra banda, si $S=0, R=1$ la sortida $Q$ sempre serà 0.\nAixò com es pot imaginar, porta un greu problema, no està permès definir $S = 1, R= 1$, ja que **la sortida està indeterminada**.\nD'aquesta manera, la taula de transicions i la taula de veritat queden de la següent manera:\n\nTaula de transicions:\n\n| $Q⁻$ | $Q⁺$ | $S$ | $R$ |\n| ---- | ---- | --- | --- |\n| 0    | 0    | 0   | X   |\n| 0    | 1    | 1   | 0   |\n| 1    | 0    | 0   | 1   |\n| 1    | 1    | X   | 0   |\n\nTaula de veritat:\n\n| $S$ | $R$ | $Q⁺$             |\n| --- | --- | ---------------- |\n| 0   | 0   | $Q⁻$             |\n| 0   | 1   | 0                |\n| 1   | 0   | 1                |\n| 1   | 1   | X (Indeterminat) |\n### Tipus D\nEl tipus D és molt similar al RS, de fet, és el mateix amb les dues entrades connectades entre si de la següent manera:\n![Construcció flip-flop D](/elecdig/b1/t2/d.png)\n\nD'aquesta manera es soluciona el problema de l'entrada indeterminada, ja que mai es podrà definir $S$ i $R$ a 1 a la vegada.\nLes seves taules són les següents:\n\nTaula de transicions:\n\n| $Q⁻$ | $Q⁺$ | $D$ |\n| ---- | ---- | --- |\n| 0    | 0    | 0   |\n| 0    | 1    | 1   |\n| 1    | 0    | 0   |\n| 1    | 1    | 1   |\n\nTaula de veritat:\n\n| $D$ | $Q⁺$ |\n| --- | ---- |\n| 0   | 0    |\n| 1   | 1    |\n### Tipus JK\nAquest flip-flop també és similar a un RS, amb les entrades connectades de la següent manera:\n![Construcció flip-flop JK](/elecdig/b1/t2/jk.png)\n\nPer tant, quan $J=1, K=1 \\Rightarrow Q⁺ = \\overline{Q⁻}$ \nLes seves taules, per tant són:\n\nTaula de transicions:\n\n| $Q⁻$ | $Q⁺$ | $J$ | $K$ |\n| ---- | ---- | --- | --- |\n| 0    | 0    | 0   | X   |\n| 0    | 1    | 1   | X   |\n| 1    | 0    | X   | 1   |\n| 1    | 1    | X   | 0   |\n\nTaula de veritat:\n\n| $J$ | $K$ | $Q⁺$            |\n| --- | --- | --------------- |\n| 0   | 0   | $Q⁻$            |\n| 0   | 1   | 0               |\n| 1   | 0   | 1               |\n| 1   | 1   | $\\overline{Q⁻}$ |\n## Activació dels flip-flops\nNormalment, els circuits funcionen amb un [[Estructura i algebra de boole#Senyal de rellotge|senyal de rellotge]] per a poder sincronitzar tots els components, per tant, ens interessa que poguem controlar els flip-flops amb una senyal de rellotge, per això, els flip-flops tenen una altra senyal d'entrada, la senyal de *clock*.\n\nAquesta senyal es pot fer servir de quatre maneres diferents en els circuits:\n- Per flanc de pujada\n- Per flanc de baixada\n- Per nivell alt\n- Per nivell baix\n\nEl conveni per a saber de quina manera funciona el flip-flop és el següent:\n![Conveni rellotge flip-flop](/elecdig/b1/t2/conveni.png)\n\n### Definir de manera asíncrona\nEls flip-flops es poden definir de manera asíncrona si porten incorporades les entrades $CLR$ (clear) i $PR$ (preset).\n\nAquestes entrades ignoren el senyal de rellotge i actuen en qualsevol moment, el seu funcionament és el següent:\n- $CLR$ defineix $Q^+ = 0$\n- $PR$ defineix $Q^+=1$\n\n## Registres (o també shift registers)\nEls registres són uns circuits construïts a base de flip-flops que actuen com una espècie de memòria, a diferència dels flip-flops, aquests poden emmagatzemar vàries quantitats de bits, depenent de la seva construcció.\n\nHi ha diferents tipus de registres, tot i que tots funcionen a partir del mateix principi, només canvien la forma en la que es llegeixen o entren les dades emmagatzemades.\nPer a simplificar el tema, ja que es pot deduir com funcionen els altres, només ensenyaré el **registre universal** o *universal shift register*.\n\nAquest està construït de la següent manera:\n![Construcció registre universal](/elecdig/b1/t2/unireg.png)\n\nEs veu que té diferents entrades i sortides, les entrades són les següents:\n- $\\overline{LD}/SH$ Selecciona entre el mode en sèrie o el mode en paral·lel\n- $SI$ És l'entrada en sèrie, només utilitzada si el mode en sèrie està activat\n- $CLK$ Senyal de rellotge\n- $CLR$ Si en té, deixa el registre a 0 en totes les posicions\n- $D_n$ Entrades en paral·lel, només actives si el mode paral·lel està activat\n\nLes sortides que té son:\n- $Q_n$ La sortida en paral·lel, o, si només es llegeix la última, la sortida en sèrie.\n\n## Comptadors\nEls comptadors són uns sistemes molt útils que permeten comptar el nombre de cops que ha ocorregut un esdeveniment en particular, tot i contar de 0 a *n*, també poden comptar amb qualsevol seqüència \"aleatòria\" definida en la seva construcció.\nEs diu que un comptador es **asíncron** si els senyal de rellotge (o l'esdeveniment) no arriba a tots els flip-flops a la vegada.\nPer altra banda, s'anomena **síncron** si el senyal arriba a tots els flip-flops a la vegada.\n\nSi un comptador es connecta a un rellotge, es pot fer servir com a **divisor de freqüència**, escollint com es vol que es divideixi triant un bit de un pes diferent.\n\n### Comptadors asíncrons\nUn comptador asíncron bàsic es construeix de la següent manera:\n![Construcció comptador asíncron incremental](/elecdig/b1/t2/comptasinc.png)\n\nEs pot veure que només té una entrada, tot i que té *n* sortides, depenent del número al que es vulgui contar.\n\nSi es vol fer que el comptador sigui decremental, es pot connectar de la següent manera:\n![Construcció comptador asíncron decrementall](/elecdig/b1/t2/comptasdec.png)\n\nI, finalment, si es vol seleccionar entre un comptador incremental o decremental senzillament s'ha de col·locar un multiplexor 2x1 entre cada flip-flop que seleccioni entre la sortida negada o no-negada.\n\n### Comptadors síncrons\nEls comptadors síncrons es caracteritzen per que el senyal de rellotge arriba a la vegada a tots els flip-flops, aquests es poden construïr per a que segueixin una seqüència en concret.\nPer a dissenyar-los es fa de la següent manera:\n#### Disseny d'un comptador síncron\n1. **Determinar la seqüència**\n\t1. Per a aquest exemple, farem un comptador asíncron up/down, per tant si $UP/DW = 0$ la seqüència és: $0, 1, 2, 3, 4, 5, 6, 7$ i per a $UP/DW = 1$ la seqüència serà: $7, 6, 5, 4, 3, 2, 1, 0$\n2. **Decidir el tipus de flip-flop**\n\t1. Per a construir l'exemple es faràn servir flip-flops de tipus JK.\n3. **Fer la taula de veritat i simplificar per karnaugh**\n\t1. La taula de veritat queda de la següent manera:\n\n\n| $UP/DW$ | $Q_2^-$ | $Q_1^-$ | $Q_0^-$ | $Q_2^+$ | $Q_1^+$ | $Q_0^+$ | $J_2$ | $K_2$ | $J_1$ | $K_1$ | $J_0$ | $K_0$ |\n| ------- | ------- | ------- | ------- | ------- | ------- | ------- | ----- | ----- | ----- | ----- | ----- | ----- |\n| 0       | 0       | 0       | 0       | 0       | 0       | 1       | 0     | X     | 0     | X     | 1     | X     |\n| 0       | 0       | 0       | 1       | 0       | 1       | 0       | 0     | X     | 1     | X     | X     | 1     |\n| 0       | 0       | 1       | 0       | 0       | 1       | 1       | 0     | X     | X     | 0     | 1     | X     |\n| 0       | 0       | 1       | 1       | 1       | 0       | 0       | 1     | X     | X     | 1     | X     | 1     |\n| 0       | 1       | 0       | 0       | 1       | 0       | 1       | X     | 0     | 0     | X     | 1     | X     |\n| 0       | 1       | 0       | 1       | 1       | 1       | 0       | X     | 0     | 1     | X     | X     | 1     |\n| 0       | 1       | 1       | 0       | 1       | 1       | 1       | X     | 0     | X     | 0     | 1     | X     |\n| 0       | 1       | 1       | 1       | 0       | 0       | 0       | X     | 1     | X     | 1     | X     | 1     |\n| 1       | 0       | 0       | 0       | 1       | 1       | 1       | 1     | X     | 1     | X     | 1     | X     |\n| 1       | 0       | 0       | 1       | 0       | 0       | 0       | 0     | X     | 0     | X     | X     | 1     |\n| 1       | 0       | 1       | 0       | 0       | 0       | 1       | 0     | X     | X     | 1     | 1     | X     |\n| 1       | 0       | 1       | 1       | 0       | 1       | 0       | 0     | X     | X     | 0     | X     | 1     |\n| 1       | 1       | 0       | 0       | 0       | 1       | 1       | X     | 1     | 1     | X     | 1     | X     |\n| 1       | 1       | 0       | 1       | 1       | 0       | 0       | X     | 0     | 0     | X     | X     | 1     |\n| 1       | 1       | 1       | 0       | 1       | 0       | 1       | X     | 0     | X     | 1     | 1     | X     |\n| 1       | 1       | 1       | 1       | 1       | 1       | 0       | X     | 0     | X     | 0     | X     | 1     |\n\nDesprés de la simplificació per karnaugh, les funcions queden:\n$$\nK_2=E\\cdot \\overline{Q_1 \\cdot Q_0} + \\overline{E} \\cdot Q_1 \\cdot Q_0$$\n$$J_2=E\\cdot \\overline{Q_1 \\cdot Q_0} + \\overline{E} \\cdot Q_1 \\cdot Q_0$$\n\n$$K_1=\\overline{E} \\cdot Q_0 + E \\cdot \\overline{Q_0}$$\n$$J_1=\\overline{E} \\cdot Q_0 + E \\cdot \\overline{Q_0}$$\n\n$$\nK_0=1$$\n$$J_0=1\n$$\n4. **Implementar el circuit**\n\t1. El comptador queda implementat de la següent manera:\n\t![Construcció comptador síncron](/elecdig/b1/t2/comptsinc.png)","lastmodified":"2025-02-19T08:39:09.311769807Z","tags":null}}